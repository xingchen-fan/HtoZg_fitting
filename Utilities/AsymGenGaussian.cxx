/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "AsymGenGaussian.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "TF1.h"

ClassImp(AsymGenGaussian); 

 AsymGenGaussian::AsymGenGaussian(const char *name, const char *title, 
                        RooAbsReal& _m,
                        RooAbsReal& _kappa,
                        RooAbsReal& _alpha,
                        RooAbsReal& _xsi,
//                        RooAbsReal& _sigma,
            		        double xlow_,
                        double xhigh_) :
   RooAbsPdf(name,title), 
   m(        "m",     "m", this, _m),
   kappa("kappa", "kappa", this, _kappa),
   alpha("alpha", "alpha", this, _alpha),
   xsi(    "xsi",   "xsi", this, _xsi),
//   sigma("sigma", "sigma", this, _sigma),
   xlow(xlow_),
   xhigh(xhigh_)
 { 
 } 


 AsymGenGaussian::AsymGenGaussian(const AsymGenGaussian& other, const char* name) :  
   RooAbsPdf(other,name), 
   m(        "m", this, other.m),
   kappa("kappa", this, other.kappa),
   alpha("alpha", this, other.alpha),
   xsi(    "xsi", this, other.xsi),
//   sigma("sigma", this, other.sigma),
   xlow(other.xlow),
   xhigh(other.xhigh)
 { 
 } 


 // Original
Double_t agg_mfunc(Double_t* x, Double_t* pr){
  Double_t y = (x[0] - pr[2])/pr[1];
  if(fabs(pr[0])>0.01){
    y = -1.0/pr[0]*TMath::Log(1-pr[0]*y);
  }
  return TMath::Gaus(y,1.0)/(pr[1]-pr[0]*(x[0]-pr[2]));

}

void AsymGenGaussian::updateNorm(std::vector<Double_t> fitpars) const{
    if (fitpars != current) {
        int nbins = 10000;
        Double_t low = xlow;
        Double_t high = xhigh;
        Double_t _norm = 0;
        TF1 intfunc("func", agg_mfunc, 0., 200., 8);
        for(int i(0); i<nbins; i++) {
            intfunc.SetParameters(kappa, alpha, xsi);//, sigma);
            _norm+= ((high - low)/nbins) * intfunc.Eval(low + (i + 0.5)*(high - low)/nbins);

        }
    norm = _norm;
    //cout << "norm = " << norm << endl;
    }
}

Double_t AsymGenGaussian::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
  std::vector<Double_t> vect;
  vect.push_back(kappa); vect.push_back(alpha); vect.push_back(xsi);// vect.push_back(sigma);
  updateNorm(vect);
  vect.clear();
  current.clear();
  current.insert(current.end(), {kappa, alpha, xsi}); //, sigma});  
  Double_t y = (m-xsi)/alpha;
  if(fabs(kappa)>0.01){
    y = -1.0/kappa*TMath::Log(1-kappa*y);
  }
  return TMath::Gaus(y,1.0)/(alpha-kappa*(m-xsi))/norm;
 }

//  Double_t mfunc(Double_t* x, Double_t* pr){
//     Double_t width, power;
//     // vh - vl >> vh
//     power = pr[1] + pr[2]*(x[0] - 100)/(180-100);
//     if(x[0] <= pr[0]) width = pr[3] + pr[4]*(x[0] - pr[0]);
//     else width = pr[3] + pr[5]*(x[0] - pr[0]);
//     return exp(-1*pow(fabs((x[0]-pr[0])/width), power));

// }
//  Double_t AsymGenGaussian::evaluate() const 
//  { 
//   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
//   Double_t width, power;
//   // vh - vl >> vh
//   power = vl + vr*(m - 100)/(180-100);
//   if(m <= m0) width = s0 + sl*(m - m0);
//   else width = s0 + sh*(m - m0);
//   TF1 modg("modg", mfunc, 100, 180, 6);
//   modg.SetParameters(m0, vl, vr, s0, sl, sh);
//   Double_t selfnorm = modg.Integral(100, 180);

//   return exp(-1*pow(fabs((m-m0)/width), power))/selfnorm;
//  } 

//  // Type 0. Please make s0 a constant because it is not used.
//  Double_t mfunc(Double_t* x, Double_t* pr){
//     Double_t width, power;
//     // vh - vl >> vh
//     power = pr[1] + pr[2]*(x[0] - 100)/(180-100);
//     width = pr[3] + pr[4]*(x[0] - 100)/80;
//     return exp(-1*pow(fabs((x[0]-pr[0])/width), power));

// }
//  Double_t AsymGenGaussian::evaluate() const 
//  { 
//    // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
//   Double_t width, power;
//   // vh - vl >> vh
//   power = vl + vr*(m - 100)/(180-100);
//   width = sl + sh*(m - 100)/(180-100);
//   TF1 modg("modg", mfunc, 100, 180, 5);
//   modg.SetParameters(m0, vl, vr, sl, sh);
//   Double_t selfnorm = modg.Integral(110, 180);
//   return exp(-1*pow(fabs((m-m0)/width), power))/selfnorm;
//  } 

 // Type 1-1
//  Double_t mfunc(Double_t* x, Double_t* pr){
//     Double_t width, power;
//     // vh - vl >> vh
//     power = pr[1] + pr[2]*(x[0] - 100)/(180-100);
//     width = pr[4] + pr[3]*(x[0] - 100)/(180 - 100) + pr[5] * pow((x[0] - 100)/(180 - 100),2);
//     return exp(-1*pow(fabs((x[0]-pr[0])/width), power));

// }
 
//  Double_t AsymGenGaussian::evaluate() const 
//  { 
//   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
//  Double_t width, power;
//  // vh - vl >> vh
//  power = vl + vr*(m - 100)/(180-100);
//  width = sl + s0 * (m - 100)/(180-100) + sh * pow((m-100)/(180-100),2);
//  TF1 modg("modg", mfunc, 100, 180, 6);
//   modg.SetParameters(m0, vl, vr, s0, sl, sh);
//   Double_t selfnorm = modg.Integral(100, 180);
//  return exp(-1*pow(fabs((m-m0)/width), power))/selfnorm;
//  } 

 //// Type 1-2
 //Double_t AsymGenGaussian::evaluate() const 
 //{ 
 //  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
 // Double_t width, power;
 // // vh - vl >> vh
 // width = vl + vr*(m - 100)/(180-100);
 // power = sl + s0 * (m - 100)/(180-100) + sh * pow((m-100)/(180-100),2);
 // return exp(-1*pow(fabs((m-m0)/width), power));
 //} 
